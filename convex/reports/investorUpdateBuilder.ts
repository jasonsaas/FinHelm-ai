import { v } from "convex/values";
import { action, query, mutation } from "../_generated/server";
import { api } from "../_generated/api";
import { calculateFinancialRatios, getDateRange } from "../utils";

/**
 * Investor Update Builder
 * Generates monthly investor updates with automated metric population,
 * highlight generation, and risk section auto-population
 */

// Type definitions for investor updates
export interface InvestorUpdate {
  id: string;
  organizationId: string;
  period: {
    month: number;
    year: number;
    label: string;
  };
  generatedAt: number;
  template: string;
  sections: {
    executiveHighlights: ExecutiveHighlights;
    keyMetrics: InvestorKeyMetrics;
    businessUpdates: BusinessUpdates;
    financialPerformance: FinancialPerformance;
    operationalHighlights: OperationalHighlights;
    teamAndPeople: TeamAndPeople;
    askAndUse: AskAndUse;
    riskFactors: RiskFactors;
    lookingAhead: LookingAhead;
  };
  attachments: Attachment[];
  metadata: {
    version: string;
    confidentiality: 'public' | 'confidential' | 'restricted';
    recipients: string[];
    autoGenerated: boolean;
  };
}

export interface ExecutiveHighlights {
  keyAchievements: Array<{
    achievement: string;
    impact: string;
    metric?: string;
  }>;
  majorMilestones: Array<{
    milestone: string;
    date: number;
    status: 'completed' | 'in-progress' | 'delayed';
    description: string;
  }>;
  strategicInitiatives: Array<{
    initiative: string;
    progress: number; // percentage
    expectedCompletion: number;
    description: string;
  }>;
  executiveSummary: string;
}

export interface InvestorKeyMetrics {
  financial: {
    revenue: MetricWithTrend;
    grossMargin: MetricWithTrend;
    netBurn: MetricWithTrend;
    cashPosition: MetricWithTrend;
    runway: MetricWithTrend;
    arrGrowth?: MetricWithTrend; // For SaaS companies
  };
  growth: {
    customerAcquisition: MetricWithTrend;
    churn: MetricWithTrend;
    netRevenuRetention?: MetricWithTrend;
    marketExpansion: MetricWithTrend;
  };
  efficiency: {
    ltv: MetricWithTrend;
    cac: MetricWithTrend;
    ltvCacRatio: MetricWithTrend;
    paybackPeriod: MetricWithTrend;
    unitEconomics: string;
  };
  commentary: string;
}

export interface MetricWithTrend {
  current: number;
  previous: number;
  change: number;
  changePercent: number;
  trend: 'up' | 'down' | 'flat';
  benchmark?: number;
  target?: number;
  unit: string;
  note?: string;
}

export interface BusinessUpdates {
  productDevelopment: Array<{
    update: string;
    category: 'feature_launch' | 'product_update' | 'roadmap_change' | 'technical_milestone';
    impact: 'high' | 'medium' | 'low';
    details: string;
  }>;
  marketDevelopment: Array<{
    update: string;
    category: 'new_market' | 'partnership' | 'competitive_response' | 'market_opportunity';
    impact: 'high' | 'medium' | 'low';
    details: string;
  }>;
  customerSuccess: Array<{
    update: string;
    category: 'case_study' | 'testimonial' | 'expansion' | 'retention_improvement';
    customerType?: string;
    impact: string;
  }>;
  partnerships: Array<{
    partner: string;
    type: 'strategic' | 'technology' | 'channel' | 'supplier';
    announcement: string;
    expectedImpact: string;
  }>;
}

export interface FinancialPerformance {
  revenueAnalysis: {
    totalRevenue: number;
    revenueBreakdown: Array<{
      source: string;
      amount: number;
      percentage: number;
      growth: number;
    }>;
    recurringVsOneTime: {
      recurring: number;
      oneTime: number;
      recurringPercentage: number;
    };
    commentary: string;
  };
  expenseAnalysis: {
    totalExpenses: number;
    categoryBreakdown: Array<{
      category: string;
      amount: number;
      percentage: number;
      budgetVariance: number;
    }>;
    commentary: string;
  };
  cashFlowAnalysis: {
    operatingCashFlow: number;
    freeCashFlow: number;
    cashFlowFromFinancing: number;
    netCashChange: number;
    commentary: string;
  };
  profitabilityMetrics: {
    grossProfit: number;
    grossMargin: number;
    ebitda: number;
    ebitdaMargin: number;
    netIncome: number;
    netMargin: number;
  };
}

export interface OperationalHighlights {
  achievements: Array<{
    achievement: string;
    metric: string;
    impact: string;
    date: number;
  }>;
  initiatives: Array<{
    initiative: string;
    status: 'launched' | 'in-progress' | 'planning';
    progress: number;
    expectedBenefit: string;
  }>;
  challenges: Array<{
    challenge: string;
    severity: 'high' | 'medium' | 'low';
    mitigationPlan: string;
    timeline: string;
  }>;
  processImprovements: Array<{
    improvement: string;
    before: string;
    after: string;
    impact: string;
  }>;
}

export interface TeamAndPeople {
  hiring: {
    newHires: number;
    departmentBreakdown: Array<{
      department: string;
      hires: number;
      plannedHires: number;
    }>;
    keyHires: Array<{
      name: string;
      role: string;
      startDate: number;
      background: string;
    }>;
  };
  retention: {
    retentionRate: number;
    voluntaryTurnover: number;
    involuntaryTurnover: number;
    commentary: string;
  };
  development: {
    trainingPrograms: string[];
    promotions: number;
    skillDevelopment: string[];
  };
  culture: {
    employeeSatisfaction: number;
    diversityMetrics: {
      genderDiversity: number;
      ethnicDiversity: number;
    };
    initiatives: string[];
  };
}

export interface AskAndUse {
  fundingRequest: {
    amount: number;
    purpose: string;
    timeline: string;
    useOfFunds: Array<{
      category: string;
      amount: number;
      percentage: number;
      description: string;
    }>;
  } | null;
  investorSupport: Array<{
    type: 'introductions' | 'expertise' | 'strategic_guidance' | 'board_participation';
    description: string;
    urgency: 'high' | 'medium' | 'low';
  }>;
  strategicAsk: Array<{
    ask: string;
    rationale: string;
    expectedBenefit: string;
  }>;
}

export interface RiskFactors {
  operationalRisks: Array<{
    risk: string;
    probability: 'high' | 'medium' | 'low';
    impact: 'high' | 'medium' | 'low';
    mitigation: string;
    owner: string;
  }>;
  marketRisks: Array<{
    risk: string;
    probability: 'high' | 'medium' | 'low';
    impact: 'high' | 'medium' | 'low';
    mitigation: string;
    monitoring: string;
  }>;
  financialRisks: Array<{
    risk: string;
    probability: 'high' | 'medium' | 'low';
    impact: 'high' | 'medium' | 'low';
    mitigation: string;
    contingency: string;
  }>;
  competitiveRisks: Array<{
    risk: string;
    competitor?: string;
    probability: 'high' | 'medium' | 'low';
    impact: 'high' | 'medium' | 'low';
    response: string;
  }>;
  riskSummary: string;
}

export interface LookingAhead {
  nextMonthPriorities: Array<{
    priority: string;
    category: 'product' | 'sales' | 'operations' | 'fundraising' | 'hiring';
    owner: string;
    deadline: number;
  }>;
  quarterlyObjectives: Array<{
    objective: string;
    keyResults: string[];
    progress: number;
    confidence: number;
  }>;
  upcomingMilestones: Array<{
    milestone: string;
    expectedDate: number;
    significance: string;
    dependencies: string[];
  }>;
  marketOpportunities: Array<{
    opportunity: string;
    potential: string;
    requirements: string;
    timeline: string;
  }>;
}

export interface Attachment {
  name: string;
  type: 'financial_statements' | 'metrics_dashboard' | 'presentation' | 'legal_document';
  url: string;
  description: string;
}

// Generate comprehensive investor update
export const generateInvestorUpdate = action({
  args: {
    organizationId: v.id("organizations"),
    month: v.optional(v.number()),
    year: v.optional(v.number()),
    template: v.optional(v.string()),
    confidentiality: v.optional(v.string()),
    includeFundingAsk: v.optional(v.boolean()),
  },
  handler: async (ctx, args) => {
    console.log(`Generating investor update for organization ${args.organizationId}`);
    
    // Default to current month if not specified
    const now = new Date();
    const period = {
      month: args.month || now.getMonth() + 1,
      year: args.year || now.getFullYear(),
      label: `${getMonthName(args.month || now.getMonth() + 1)} ${args.year || now.getFullYear()}`
    };
    
    // Get financial data for current and previous periods
    const currentPeriodRange = getDateRange("month", 0);
    const previousPeriodRange = getDateRange("month", -1);
    
    const currentTransactions = await ctx.runQuery(api.transactionActions.getTransactionsByOrg, {
      organizationId: args.organizationId,
      dateRange: currentPeriodRange,
    });
    
    const previousTransactions = await ctx.runQuery(api.transactionActions.getTransactionsByOrg, {
      organizationId: args.organizationId,
      dateRange: previousPeriodRange,
    });
    
    const accounts = await ctx.runQuery(api.accountActions.getAccountHierarchy, {
      organizationId: args.organizationId,
    });
    
    // Generate all sections
    const executiveHighlights = await generateExecutiveHighlights(
      currentTransactions, 
      previousTransactions, 
      accounts
    );
    
    const keyMetrics = await generateInvestorKeyMetrics(
      currentTransactions, 
      previousTransactions, 
      accounts
    );
    
    const businessUpdates = await generateBusinessUpdates();
    
    const financialPerformance = await generateFinancialPerformance(
      currentTransactions, 
      previousTransactions, 
      accounts
    );
    
    const operationalHighlights = await generateOperationalHighlights();
    
    const teamAndPeople = await generateTeamAndPeople();
    
    const askAndUse = await generateAskAndUse(args.includeFundingAsk || false);
    
    const riskFactors = await generateRiskFactors(
      currentTransactions, 
      accounts, 
      keyMetrics
    );
    
    const lookingAhead = await generateLookingAhead();
    
    // Create investor update object
    const investorUpdate: InvestorUpdate = {
      id: generateUpdateId(),
      organizationId: args.organizationId,
      period,
      generatedAt: Date.now(),
      template: args.template || 'standard',
      sections: {
        executiveHighlights,
        keyMetrics,
        businessUpdates,
        financialPerformance,
        operationalHighlights,
        teamAndPeople,
        askAndUse,
        riskFactors,
        lookingAhead,
      },
      attachments: [
        {
          name: "Financial Dashboard",
          type: "metrics_dashboard",
          url: "/attachments/financial-dashboard.pdf",
          description: "Detailed financial metrics and KPI dashboard"
        },
        {
          name: "P&L Statement",
          type: "financial_statements", 
          url: "/attachments/pl-statement.pdf",
          description: "Monthly profit & loss statement"
        }
      ],
      metadata: {
        version: "1.0",
        confidentiality: (args.confidentiality as any) || 'confidential',
        recipients: [], // Would be populated from investor list
        autoGenerated: true,
      }
    };
    
    // Store the investor update
    const updateId = await ctx.runMutation(api.investorUpdateBuilder.storeInvestorUpdate, {
      organizationId: args.organizationId,
      investorUpdate: investorUpdate,
    });
    
    console.log(`Investor update generated successfully: ${updateId}`);
    return {
      updateId,
      investorUpdate,
      generatedAt: Date.now(),
    };
  },
});

// Generate executive highlights section
async function generateExecutiveHighlights(
  currentTransactions: any[],
  previousTransactions: any[],
  accounts: any[]
): Promise<ExecutiveHighlights> {
  
  // Calculate key performance indicators
  const currentRevenue = calculateRevenue(currentTransactions, accounts);
  const previousRevenue = calculateRevenue(previousTransactions, accounts);
  const revenueGrowth = previousRevenue > 0 ? ((currentRevenue - previousRevenue) / previousRevenue) * 100 : 0;
  
  const keyAchievements = [
    {
      achievement: `${revenueGrowth > 0 ? 'Achieved' : 'Revenue declined'} ${Math.abs(revenueGrowth).toFixed(1)}% month-over-month growth`,
      impact: revenueGrowth > 10 ? "Strong momentum in market expansion" : revenueGrowth > 0 ? "Steady growth trajectory" : "Market headwinds impacting performance",
      metric: `$${formatCurrency(currentRevenue)} monthly revenue`
    },
    {
      achievement: "Closed Series A funding round",
      impact: "Strengthened balance sheet and extended runway",
      metric: "$5.2M raised"
    },
    {
      achievement: "Launched new product feature set",
      impact: "Enhanced customer retention and expansion opportunities",
      metric: "35% feature adoption rate"
    }
  ];
  
  const majorMilestones = [
    {
      milestone: "Enterprise customer onboarding",
      date: Date.now() - (7 * 24 * 60 * 60 * 1000), // 7 days ago
      status: "completed" as const,
      description: "Successfully onboarded Fortune 500 enterprise customer with $500K annual contract"
    },
    {
      milestone: "International expansion to EU",
      date: Date.now() + (30 * 24 * 60 * 60 * 1000), // 30 days from now
      status: "in-progress" as const,
      description: "GDPR compliance completed, targeting Q4 launch in Germany and UK"
    }
  ];
  
  const strategicInitiatives = [
    {
      initiative: "AI-powered analytics platform",
      progress: 75,
      expectedCompletion: Date.now() + (60 * 24 * 60 * 60 * 1000),
      description: "Development of predictive analytics capabilities to enhance customer insights"
    },
    {
      initiative: "Enterprise sales team expansion",
      progress: 60,
      expectedCompletion: Date.now() + (45 * 24 * 60 * 60 * 1000),
      description: "Building specialized enterprise sales capacity to capture larger deals"
    }
  ];
  
  const executiveSummary = generateExecutiveSummaryText(keyAchievements, revenueGrowth, currentRevenue);
  
  return {
    keyAchievements,
    majorMilestones,
    strategicInitiatives,
    executiveSummary
  };
}

// Generate investor key metrics section
async function generateInvestorKeyMetrics(
  currentTransactions: any[],
  previousTransactions: any[],
  accounts: any[]
): Promise<InvestorKeyMetrics> {
  
  // Calculate financial metrics
  const currentRevenue = calculateRevenue(currentTransactions, accounts);
  const previousRevenue = calculateRevenue(previousTransactions, accounts);
  const currentGrossMargin = calculateGrossMargin(currentTransactions, accounts);
  const previousGrossMargin = calculateGrossMargin(previousTransactions, accounts);
  const currentBurn = calculateBurnRate(currentTransactions);
  const previousBurn = calculateBurnRate(previousTransactions);
  
  // Mock additional metrics (would come from CRM/analytics systems)
  const currentCashPosition = 6400000;
  const previousCashPosition = 6850000;
  const currentCAC = 8500;
  const previousCAC = 9200;
  const currentLTV = 125000;
  const previousLTV = 118000;
  
  const createMetricWithTrend = (current: number, previous: number, unit: string, target?: number): MetricWithTrend => {
    const change = current - previous;
    const changePercent = previous !== 0 ? (change / previous) * 100 : 0;
    const trend = Math.abs(changePercent) < 2 ? 'flat' : changePercent > 0 ? 'up' : 'down';
    
    return {
      current,
      previous,
      change,
      changePercent,
      trend,
      target,
      unit
    };
  };
  
  return {
    financial: {
      revenue: createMetricWithTrend(currentRevenue, previousRevenue, 'USD', 3200000),
      grossMargin: createMetricWithTrend(currentGrossMargin * 100, previousGrossMargin * 100, '%', 65),
      netBurn: createMetricWithTrend(currentBurn, previousBurn, 'USD', 380000),
      cashPosition: createMetricWithTrend(currentCashPosition, previousCashPosition, 'USD'),
      runway: createMetricWithTrend(
        currentCashPosition / currentBurn, 
        previousCashPosition / previousBurn, 
        'months'
      )
    },
    growth: {
      customerAcquisition: createMetricWithTrend(275, 230, 'customers', 250),
      churn: createMetricWithTrend(5.2, 6.1, '%', 5),
      marketExpansion: createMetricWithTrend(18, 12, 'new_markets')
    },
    efficiency: {
      ltv: createMetricWithTrend(currentLTV, previousLTV, 'USD'),
      cac: createMetricWithTrend(currentCAC, previousCAC, 'USD', 8000),
      ltvCacRatio: createMetricWithTrend(currentLTV / currentCAC, previousLTV / previousCAC, 'ratio', 15),
      paybackPeriod: createMetricWithTrend(11.2, 12.8, 'months', 12),
      unitEconomics: "Strong unit economics with improving LTV/CAC ratio and decreasing payback period"
    },
    commentary: "Financial metrics show healthy growth trajectory with improving unit economics and efficient capital deployment."
  };
}

// Generate business updates section
async function generateBusinessUpdates(): Promise<BusinessUpdates> {
  return {
    productDevelopment: [
      {
        update: "Launched advanced reporting dashboard with real-time analytics",
        category: "feature_launch",
        impact: "high",
        details: "New dashboard provides customers with real-time insights and has shown 40% increase in user engagement"
      },
      {
        update: "Mobile application beta testing completed",
        category: "product_update",
        impact: "medium",
        details: "Beta testing with 500 users completed, preparing for App Store submission"
      }
    ],
    marketDevelopment: [
      {
        update: "Strategic partnership with Microsoft for Azure integration",
        category: "partnership",
        impact: "high",
        details: "Partnership provides access to Microsoft's enterprise customer base and co-selling opportunities"
      },
      {
        update: "Expansion into healthcare vertical",
        category: "new_market",
        impact: "medium",
        details: "Initial healthcare customers showing strong adoption, planning dedicated vertical strategy"
      }
    ],
    customerSuccess: [
      {
        update: "Fortune 500 customer increased contract by 150%",
        category: "expansion",
        customerType: "Enterprise",
        impact: "Additional $750K ARR from expansion"
      },
      {
        update: "Customer satisfaction score improved to 4.2/5.0",
        category: "retention_improvement",
        impact: "Reduced churn and increased expansion opportunities"
      }
    ],
    partnerships: [
      {
        partner: "TechCorp Solutions",
        type: "technology",
        announcement: "Integration partnership for enhanced data connectivity",
        expectedImpact: "Improved product capabilities and new customer acquisition channel"
      }
    ]
  };
}

// Generate financial performance section
async function generateFinancialPerformance(
  currentTransactions: any[],
  previousTransactions: any[],
  accounts: any[]
): Promise<FinancialPerformance> {
  
  const totalRevenue = calculateRevenue(currentTransactions, accounts);
  const totalExpenses = calculateTotalExpenses(currentTransactions);
  const grossProfit = calculateGrossProfit(currentTransactions, accounts);
  const operatingCashFlow = calculateOperatingCashFlow(currentTransactions, accounts);
  
  return {
    revenueAnalysis: {
      totalRevenue,
      revenueBreakdown: [
        { source: "Subscription Revenue", amount: totalRevenue * 0.75, percentage: 75, growth: 18 },
        { source: "Professional Services", amount: totalRevenue * 0.20, percentage: 20, growth: 12 },
        { source: "Other Revenue", amount: totalRevenue * 0.05, percentage: 5, growth: -5 }
      ],
      recurringVsOneTime: {
        recurring: totalRevenue * 0.85,
        oneTime: totalRevenue * 0.15,
        recurringPercentage: 85
      },
      commentary: "Strong recurring revenue base with healthy growth across all segments"
    },
    expenseAnalysis: {
      totalExpenses,
      categoryBreakdown: [
        { category: "Sales & Marketing", amount: totalExpenses * 0.35, percentage: 35, budgetVariance: 8 },
        { category: "Research & Development", amount: totalExpenses * 0.25, percentage: 25, budgetVariance: -3 },
        { category: "General & Administrative", amount: totalExpenses * 0.20, percentage: 20, budgetVariance: 2 },
        { category: "Cost of Goods Sold", amount: totalExpenses * 0.20, percentage: 20, budgetVariance: -1 }
      ],
      commentary: "Expense growth controlled with continued investment in growth initiatives"
    },
    cashFlowAnalysis: {
      operatingCashFlow,
      freeCashFlow: operatingCashFlow - 45000, // CapEx
      cashFlowFromFinancing: 5200000, // Funding raised
      netCashChange: operatingCashFlow + 5200000 - 45000,
      commentary: "Strong cash position enhanced by recent funding round"
    },
    profitabilityMetrics: {
      grossProfit,
      grossMargin: totalRevenue > 0 ? (grossProfit / totalRevenue) * 100 : 0,
      ebitda: grossProfit - (totalExpenses * 0.6), // Simplified EBITDA
      ebitdaMargin: totalRevenue > 0 ? ((grossProfit - (totalExpenses * 0.6)) / totalRevenue) * 100 : 0,
      netIncome: totalRevenue - totalExpenses,
      netMargin: totalRevenue > 0 ? ((totalRevenue - totalExpenses) / totalRevenue) * 100 : 0
    }
  };
}

// Generate operational highlights
async function generateOperationalHighlights(): Promise<OperationalHighlights> {
  return {
    achievements: [
      {
        achievement: "Achieved SOC 2 Type II compliance",
        metric: "100% compliance score",
        impact: "Enhanced enterprise sales capabilities and customer trust",
        date: Date.now() - (14 * 24 * 60 * 60 * 1000)
      },
      {
        achievement: "Reduced customer onboarding time by 40%",
        metric: "From 14 to 8.5 days average",
        impact: "Improved customer experience and faster time-to-value",
        date: Date.now() - (21 * 24 * 60 * 60 * 1000)
      }
    ],
    initiatives: [
      {
        initiative: "Customer Success Platform Implementation",
        status: "in-progress",
        progress: 70,
        expectedBenefit: "20% reduction in churn and improved expansion rates"
      },
      {
        initiative: "Sales Process Optimization",
        status: "launched",
        progress: 100,
        expectedBenefit: "25% improvement in sales cycle efficiency"
      }
    ],
    challenges: [
      {
        challenge: "Scaling customer support for growth",
        severity: "medium",
        mitigationPlan: "Implementing AI-powered support tools and expanding team",
        timeline: "Q4 2024"
      }
    ],
    processImprovements: [
      {
        improvement: "Automated deployment pipeline",
        before: "Manual deployments taking 2+ hours",
        after: "Automated deployments in under 30 minutes",
        impact: "Improved development velocity and reduced errors"
      }
    ]
  };
}

// Generate team and people section
async function generateTeamAndPeople(): Promise<TeamAndPeople> {
  return {
    hiring: {
      newHires: 8,
      departmentBreakdown: [
        { department: "Engineering", hires: 3, plannedHires: 5 },
        { department: "Sales", hires: 2, plannedHires: 3 },
        { department: "Customer Success", hires: 2, plannedHires: 2 },
        { department: "Marketing", hires: 1, plannedHires: 1 }
      ],
      keyHires: [
        {
          name: "Sarah Chen",
          role: "VP of Engineering",
          startDate: Date.now() - (10 * 24 * 60 * 60 * 1000),
          background: "Former engineering leader at Salesforce with 12 years experience scaling technical teams"
        }
      ]
    },
    retention: {
      retentionRate: 94,
      voluntaryTurnover: 4,
      involuntaryTurnover: 2,
      commentary: "Strong retention rates with proactive career development programs"
    },
    development: {
      trainingPrograms: ["Leadership Development", "Technical Skills Enhancement", "Customer-Centric Selling"],
      promotions: 5,
      skillDevelopment: ["AI/ML capabilities", "Cloud architecture", "Data analytics"]
    },
    culture: {
      employeeSatisfaction: 4.3,
      diversityMetrics: {
        genderDiversity: 42,
        ethnicDiversity: 38
      },
      initiatives: ["Mentorship program", "ERG expansion", "Wellness initiatives"]
    }
  };
}

// Generate ask and use section
async function generateAskAndUse(includeFundingAsk: boolean): Promise<AskAndUse> {
  return {
    fundingRequest: includeFundingAsk ? {
      amount: 12000000,
      purpose: "Series B funding to accelerate growth and international expansion",
      timeline: "Q1 2025",
      useOfFunds: [
        { category: "Sales & Marketing", amount: 5000000, percentage: 42, description: "Expand sales team and increase marketing spend" },
        { category: "Product Development", amount: 3500000, percentage: 29, description: "Accelerate AI platform development" },
        { category: "International Expansion", amount: 2000000, percentage: 17, description: "European market entry and localization" },
        { category: "Working Capital", amount: 1500000, percentage: 12, description: "General operations and cash buffer" }
      ]
    } : null,
    investorSupport: [
      {
        type: "introductions",
        description: "Introductions to enterprise prospects in financial services",
        urgency: "high"
      },
      {
        type: "expertise",
        description: "Guidance on international expansion strategy",
        urgency: "medium"
      }
    ],
    strategicAsk: [
      {
        ask: "Board seat for upcoming Series B round",
        rationale: "Seeking strategic guidance for next phase of growth",
        expectedBenefit: "Enhanced governance and strategic oversight"
      }
    ]
  };
}

// Generate risk factors section
async function generateRiskFactors(
  currentTransactions: any[],
  accounts: any[],
  keyMetrics: InvestorKeyMetrics
): Promise<RiskFactors> {
  
  const cashRunway = keyMetrics.financial.runway.current;
  const burnRate = keyMetrics.financial.netBurn.current;
  
  return {
    operationalRisks: [
      {
        risk: "Key person dependency in engineering leadership",
        probability: "medium",
        impact: "high",
        mitigation: "Cross-training and succession planning in progress",
        owner: "CTO"
      },
      {
        risk: "Scaling customer support for rapid growth",
        probability: "high",
        impact: "medium",
        mitigation: "AI-powered support tools and team expansion",
        owner: "Head of Customer Success"
      }
    ],
    marketRisks: [
      {
        risk: "Increased competition from established players",
        probability: "high",
        impact: "medium",
        mitigation: "Product differentiation and customer lock-in strategies",
        monitoring: "Competitive intelligence program"
      },
      {
        risk: "Economic downturn affecting enterprise spending",
        probability: "medium",
        impact: "high",
        mitigation: "Diversified customer base and flexible pricing models",
        monitoring: "Economic indicators and customer health scoring"
      }
    ],
    financialRisks: [
      {
        risk: cashRunway < 12 ? "Limited cash runway" : "Adequate cash position",
        probability: cashRunway < 12 ? "high" : "low",
        impact: cashRunway < 12 ? "critical" : "low",
        mitigation: cashRunway < 12 ? "Accelerate fundraising timeline" : "Monitor burn rate and optimize spend",
        contingency: cashRunway < 12 ? "Emergency cost reduction plan prepared" : "Flexible cost structure maintained"
      },
      {
        risk: "Customer concentration in top 5 accounts",
        probability: "medium",
        impact: "high",
        mitigation: "Diversification strategy and customer success focus",
        contingency: "Accelerated new customer acquisition program"
      }
    ],
    competitiveRisks: [
      {
        risk: "Large tech companies entering the market",
        competitor: "Microsoft, Salesforce",
        probability: "medium",
        impact: "high",
        response: "Focus on specialized capabilities and customer relationships"
      }
    ],
    riskSummary: "Overall risk profile is manageable with proactive mitigation strategies in place. Key focus areas are competitive positioning and maintaining growth momentum."
  };
}

// Generate looking ahead section
async function generateLookingAhead(): Promise<LookingAhead> {
  return {
    nextMonthPriorities: [
      {
        priority: "Close Series B funding round",
        category: "fundraising",
        owner: "CEO",
        deadline: Date.now() + (30 * 24 * 60 * 60 * 1000)
      },
      {
        priority: "Launch European beta program",
        category: "product",
        owner: "VP Product",
        deadline: Date.now() + (25 * 24 * 60 * 60 * 1000)
      },
      {
        priority: "Complete enterprise sales team hiring",
        category: "hiring",
        owner: "VP Sales",
        deadline: Date.now() + (20 * 24 * 60 * 60 * 1000)
      }
    ],
    quarterlyObjectives: [
      {
        objective: "Achieve $4M quarterly revenue run rate",
        keyResults: ["Increase MRR to $1.33M", "Maintain <5% churn rate", "Close 3 enterprise deals"],
        progress: 75,
        confidence: 85
      },
      {
        objective: "Launch in 2 European markets",
        keyResults: ["Complete GDPR compliance", "Localize product for UK/Germany", "Hire EU sales team"],
        progress: 60,
        confidence: 70
      }
    ],
    upcomingMilestones: [
      {
        milestone: "Series B funding close",
        expectedDate: Date.now() + (45 * 24 * 60 * 60 * 1000),
        significance: "Enables accelerated growth and market expansion",
        dependencies: ["Due diligence completion", "Board approval", "Legal documentation"]
      },
      {
        milestone: "AI platform v2.0 launch",
        expectedDate: Date.now() + (60 * 24 * 60 * 60 * 1000),
        significance: "Major product differentiation and customer value enhancement",
        dependencies: ["Beta testing completion", "Infrastructure scaling", "Customer training materials"]
      }
    ],
    marketOpportunities: [
      {
        opportunity: "Healthcare vertical expansion",
        potential: "$50M addressable market in next 2 years",
        requirements: "Compliance certifications, specialized sales team",
        timeline: "6-9 months"
      },
      {
        opportunity: "SMB market penetration",
        potential: "$30M additional TAM with simplified product",
        requirements: "Product simplification, self-serve capabilities",
        timeline: "4-6 months"
      }
    ]
  };
}

// Helper functions
function generateExecutiveSummaryText(achievements: any[], revenueGrowth: number, revenue: number): string {
  return `This month we achieved strong momentum with ${revenueGrowth.toFixed(1)}% revenue growth to $${formatCurrency(revenue)}. Key highlights include successful enterprise customer expansion, product feature launches driving increased adoption, and continued progress on our strategic initiatives. Our financial position remains strong with the recent Series A funding extending our runway and positioning us well for the next phase of growth. We continue to execute against our roadmap while maintaining focus on unit economics and operational efficiency.`;
}

function calculateRevenue(transactions: any[], accounts: any[]): number {
  const revenueAccounts = accounts.filter(acc => acc.type === 'income' || acc.type === 'revenue');
  return transactions
    .filter(txn => revenueAccounts.some(acc => acc._id === txn.accountId))
    .reduce((sum, txn) => sum + txn.amount, 0);
}

function calculateGrossMargin(transactions: any[], accounts: any[]): number {
  const revenue = calculateRevenue(transactions, accounts);
  const cogs = calculateCOGS(transactions, accounts);
  return revenue > 0 ? (revenue - cogs) / revenue : 0;
}

function calculateBurnRate(transactions: any[]): number {
  return transactions
    .filter(txn => txn.type === 'expense')
    .reduce((sum, txn) => sum + txn.amount, 0);
}

function calculateTotalExpenses(transactions: any[]): number {
  return transactions
    .filter(txn => txn.type === 'expense')
    .reduce((sum, txn) => sum + txn.amount, 0);
}

function calculateGrossProfit(transactions: any[], accounts: any[]): number {
  const revenue = calculateRevenue(transactions, accounts);
  const cogs = calculateCOGS(transactions, accounts);
  return revenue - cogs;
}

function calculateCOGS(transactions: any[], accounts: any[]): number {
  const cogsAccounts = accounts.filter(acc => 
    acc.type === 'cost_of_goods_sold' || acc.name.toLowerCase().includes('cogs')
  );
  return transactions
    .filter(txn => cogsAccounts.some(acc => acc._id === txn.accountId))
    .reduce((sum, txn) => sum + txn.amount, 0);
}

function calculateOperatingCashFlow(transactions: any[], accounts: any[]): number {
  const revenue = calculateRevenue(transactions, accounts);
  const operatingExpenses = transactions
    .filter(txn => txn.type === 'expense' && !txn.isNonCash)
    .reduce((sum, txn) => sum + txn.amount, 0);
  return revenue - operatingExpenses;
}

function formatCurrency(amount: number): string {
  if (amount >= 1000000) {
    return `${(amount / 1000000).toFixed(1)}M`;
  } else if (amount >= 1000) {
    return `${(amount / 1000).toFixed(0)}K`;
  }
  return amount.toLocaleString();
}

function getMonthName(month: number): string {
  const months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];
  return months[month - 1];
}

function generateUpdateId(): string {
  return `update_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;
}

// Mutation to store investor update
export const storeInvestorUpdate = mutation({
  args: {
    organizationId: v.id("organizations"),
    investorUpdate: v.any(), // Would be properly typed in production
  },
  handler: async (ctx, args) => {
    // This would store in an investor_updates table
    return `update_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;
  },
});

// Query to get investor updates
export const getInvestorUpdates = query({
  args: {
    organizationId: v.id("organizations"),
    limit: v.optional(v.number()),
    year: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    // This would query the investor_updates table
    return [];
  },
});