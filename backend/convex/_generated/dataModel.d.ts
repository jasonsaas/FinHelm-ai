/* eslint-disable */
/**
 * Generated Convex data model types.
 * This file is generated by the Convex CLI.
 * Do not edit this file manually.
 */

export type Id<TableName extends keyof DataModel> = string & {
  readonly __tableName: TableName;
};

export interface DataModel {
  users: {
    _id: Id<"users">;
    _creationTime: number;
    email: string;
    name: string;
    profileImage?: string;
    role: "admin" | "user" | "viewer";
    isActive: boolean;
    createdAt: number;
    updatedAt: number;
    lastLoginAt?: number;
    preferences?: {
      timezone: string;
      language: string;
      notifications: {
        email: boolean;
        sms: boolean;
        inApp: boolean;
      };
    };
  };

  organizations: {
    _id: Id<"organizations">;
    _creationTime: number;
    name: string;
    slug: string;
    erpType: "quickbooks" | "sage_intacct" | "netsuite" | "xero";
    erpSettings: {
      companyId?: string;
      baseUrl?: string;
      apiVersion?: string;
      features: string[];
    };
    isActive: boolean;
    subscriptionTier: "free" | "basic" | "premium" | "enterprise";
    createdAt: number;
    updatedAt: number;
  };

  userOrganizations: {
    _id: Id<"userOrganizations">;
    _creationTime: number;
    userId: Id<"users">;
    organizationId: Id<"organizations">;
    role: "owner" | "admin" | "member" | "viewer";
    permissions: string[];
    joinedAt: number;
    isActive: boolean;
  };

  erpConnections: {
    _id: Id<"erpConnections">;
    _creationTime: number;
    organizationId: Id<"organizations">;
    userId: Id<"users">;
    erpType: "quickbooks" | "sage_intacct" | "netsuite" | "xero";
    connectionName: string;
    isActive: boolean;
    credentials: {
      accessToken?: string;
      refreshToken?: string;
      companyId?: string;
      realmId?: string;
      expiresAt?: number;
    };
    lastSyncAt?: number;
    syncStatus: "active" | "failed" | "pending" | "disabled";
    createdAt: number;
    updatedAt: number;
  };

  accounts: {
    _id: Id<"accounts">;
    _creationTime: number;
    organizationId: Id<"organizations">;
    erpConnectionId: Id<"erpConnections">;
    externalId: string;
    code: string;
    name: string;
    fullName: string;
    type: "asset" | "liability" | "equity" | "revenue" | "expense" | "other_current_asset" | "other_current_liability" | "accounts_payable" | "accounts_receivable" | "bank" | "cost_of_goods_sold" | "fixed_asset" | "income" | "long_term_liability";
    category?: string;
    subType?: string;
    parentId?: Id<"accounts">;
    level: number;
    path: string[];
    isActive: boolean;
    description?: string;
    balance?: number;
    currency: string;
    taxCode?: string;
    lastSyncAt: number;
    createdAt: number;
    updatedAt: number;
  };

  transactions: {
    _id: Id<"transactions">;
    _creationTime: number;
    organizationId: Id<"organizations">;
    erpConnectionId: Id<"erpConnections">;
    externalId: string;
    type: "journal_entry" | "invoice" | "bill" | "payment" | "deposit" | "transfer" | "adjustment";
    accountId: Id<"accounts">;
    referenceNumber?: string;
    description: string;
    amount: number;
    debitAmount?: number;
    creditAmount?: number;
    currency: string;
    exchangeRate?: number;
    transactionDate: number;
    postingDate?: number;
    dueDate?: number;
    customerId?: string;
    vendorId?: string;
    projectId?: string;
    departmentId?: string;
    locationId?: string;
    tags: string[];
    status: "draft" | "pending" | "posted" | "void" | "reconciled";
    reconciliationStatus?: "unreconciled" | "reconciled" | "pending";
    lastSyncAt: number;
    createdAt: number;
    updatedAt: number;
  };

  agents: {
    _id: Id<"agents">;
    _creationTime: number;
    organizationId: Id<"organizations">;
    userId: Id<"users">;
    name: string;
    description: string;
    category: "financial_intelligence" | "supply_chain" | "revenue_customer" | "it_operations" | "custom";
    type: "variance_explanation" | "forecasting" | "cash_flow_intelligence" | "revenue_recognition" | "close_acceleration" | "board_presentation" | "anomaly_monitoring" | "inventory_optimization" | "demand_forecasting" | "vendor_risk" | "cogs_attribution" | "fill_rate_analytics" | "supplier_integration" | "sales_mix_margin" | "churn_prediction" | "revenue_decomposition" | "sales_forecast" | "customer_profitability" | "upsell_expansion" | "data_sync_health" | "change_impact" | "workflow_automation" | "change_management_risk" | "access_review" | "multivariate_prediction" | "custom";
    isActive: boolean;
    isPremium: boolean;
    config: {
      prompt?: string;
      model?: string;
      temperature?: number;
      maxTokens?: number;
      dataSource: string[];
      filters?: {
        accounts?: Id<"accounts">[];
        dateRange?: {
          start: number;
          end: number;
        };
        minAmount?: number;
        maxAmount?: number;
      };
      schedule?: {
        frequency: "manual" | "daily" | "weekly" | "monthly";
        time?: string;
        timezone?: string;
      };
    };
    lastRunAt?: number;
    runCount: number;
    averageExecutionTime?: number;
    createdAt: number;
    updatedAt: number;
  };

  agentExecutions: {
    _id: Id<"agentExecutions">;
    _creationTime: number;
    organizationId: Id<"organizations">;
    agentId: Id<"agents">;
    userId?: Id<"users">;
    status: "pending" | "running" | "completed" | "failed" | "cancelled";
    input: {
      query?: string;
      parameters?: Record<string, any>;
      dataRange?: {
        start: number;
        end: number;
      };
    };
    output?: {
      summary: string;
      dataOverview: {
        totalRecords: number;
        dateRange: {
          start: number;
          end: number;
        };
        keyMetrics: Array<{
          name: string;
          value: any;
          change?: number;
          trend?: "up" | "down" | "flat";
        }>;
      };
      patterns: Array<{
        type: string;
        description: string;
        confidence: number;
        impact: "high" | "medium" | "low";
        data?: any[];
      }>;
      actions: Array<{
        type: string;
        description: string;
        priority: "high" | "medium" | "low";
        automated: boolean;
        dueDate?: number;
        assignee?: Id<"users">;
      }>;
    };
    error?: string;
    executionTime?: number;
    tokensUsed?: number;
    cost?: number;
    startedAt: number;
    completedAt?: number;
  };

  syncJobs: {
    _id: Id<"syncJobs">;
    _creationTime: number;
    organizationId: Id<"organizations">;
    erpConnectionId: Id<"erpConnections">;
    type: "full_sync" | "incremental_sync" | "accounts_sync" | "transactions_sync" | "reconciliation";
    status: "pending" | "running" | "completed" | "failed" | "cancelled";
    startedAt: number;
    completedAt?: number;
    recordsProcessed: number;
    recordsInserted: number;
    recordsUpdated: number;
    recordsSkipped: number;
    errors: Array<{
      type: string;
      message: string;
      recordId?: string;
      timestamp: number;
    }>;
    progress: number;
    estimatedCompletion?: number;
    lastActivityAt: number;
  };

  auditLogs: {
    _id: Id<"auditLogs">;
    _creationTime: number;
    organizationId: Id<"organizations">;
    userId?: Id<"users">;
    action: string;
    resourceType: string;
    resourceId?: string;
    details: {
      before?: any;
      after?: any;
      metadata?: Record<string, any>;
    };
    ipAddress?: string;
    userAgent?: string;
    timestamp: number;
  };
}